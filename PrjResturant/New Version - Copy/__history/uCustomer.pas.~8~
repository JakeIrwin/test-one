unit uCustomer;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, adodb, StdCtrls, DB;

type
  TfrmCustomer = class(TForm)
    EdtCustomerID: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    EdtCustomerAddress: TEdit;
    EdtCustomerName: TEdit;
    EdtCustomerContactNO: TEdit;
    Label4: TLabel;
    BtnAddCustomer: TButton;
    BtnShowCustomerBookings: TButton;
    BtnAmendCustomer: TButton;
    ADOTblCustomer: TADOTable;
    BtnExit: TButton;
    BtnRandomID: TButton;
    procedure BtnAddCustomerClick(Sender: TObject);
    procedure BtnExitClick(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure BtnRandomIDClick(Sender: TObject);
    procedure ValidateID (sender:TObject);
    procedure ValidateName (sender:TObject);
    procedure ValidateNumber (sender:TObject);
    procedure ValidateAddress (sender:TObject);

    //procedure ValidateCustomer (sender:tobject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmCustomer: TfrmCustomer;
  Error: boolean;

implementation
uses umainmenu, ulogin;
{$R *.dfm}

procedure TfrmCustomer.BtnAddCustomerClick(Sender: TObject);
var error, output: integer;
    ID, Name, Address, ContectNO: string;

begin
      if ADOtblCustomer.Locate('CustomerID', EdtCustomerID.text,[]) then
      ShowMessage('This customerID already exists, please choose another.')
  else

     ID:= EdtCustomerID.Text;
     validateID(ID: string);

     Name:= EdtCustomerName.Text;
    begin
    begin
      ADOtblCustomer.Append;
      ADOtblCustomer ['CustomerID'] := edtCustomerID.Text;
      ADOtblCustomer ['Name'] := edtCustomerName.Text;
      ADOtblCustomer ['Address'] := edtCustomerAddress.Text;
      ADOtblCustomer ['ContactNumber'] := edtCustomerAddress.Text;
      ADOtblCustomer.Post;
      ADOtblCustomer.Refresh;
    end;
  edtCustomerID.SetFocus;
    end

end;

procedure TfrmCustomer.BtnExitClick(Sender: TObject);
begin
frmcustomer.Hide;
FrmMain.show;
end;

procedure TfrmCustomer.BtnRandomIDClick(Sender: TObject);
var
int: integer;
str: string;
begin
int:= random(9999);
str:= IntToStr(int);
EdtCustomerID.Text:=str;
end;

procedure TfrmCustomer.FormActivate(Sender: TObject);
begin
 ADOtblCustomer.Connection := frmlogin.adotblwickhambar;
  ADOtblCustomer.TableName := 'tblCustomer';
  ADOtblCustomer.Active := true;
end;

procedure validateID(CustomerID: string; sender: Tobject);
begin
val (CustomerID,output,error);
 if error=0 then
end
end.
